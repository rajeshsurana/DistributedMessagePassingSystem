{"name":"Distributed Message Passing System","tagline":"Client - Server Application","body":"## Overall Details\r\n* Three clients, one server.\r\n* Server contains a table, 10 entries. Each entry is a string.\r\n* Client 1 and client 2, add/delete or modify the strings, at random.\r\n* Client 3 prints out the table, sometimes.\r\n\r\n## More Details\r\n* Server function is pretty much obvious. The printing client (3) gets the data from the server and prints (server does not print) and hence there will be some issues getting the data from the server. (Do not cheat, if the client gets the address of the string from the server, it can print the string, as it is in shared memory. This is cheating as client server programs do not have access to shared memory.)\r\n* The functions server supports, is to be decided by you. There are many ways to do it.\r\n*  Client 1 and 2 may have some pre-coded strings. They do operations on the server, at random and uses these pre-coded strings.\r\n* Client 3 does not constantly print, it prints “sometimes”. Hint: Try to put a few yields in client 3 to skip printing.\r\n\r\n## Stages\r\n* Note that the strings may exceed capacity of a message. The first stage is to do it with strings smaller than message size.\r\n* Second stage would be to redesign the clients and sever to be able to do longer strings. Also note that client 3 should print the table with one request to the server, and not multiple requests.\r\n\r\n## Snapshots\r\n* Application at start\r\n\r\n![menu](https://raw.githubusercontent.com/rajeshsurana/DistributedMessagePassingSystem/master/images/menu.png)\r\n\r\n* Application while running\r\n\r\n![in action](https://raw.githubusercontent.com/rajeshsurana/DistributedMessagePassingSystem/master/images/cl-srv.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}